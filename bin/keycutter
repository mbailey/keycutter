#!/usr/bin/env bash
# set -eu -o pipefail

# [preview] keycutter - Create FIDO SSH keys for authentication and commit signing.

# KEYCUTTER_ROOT="$(readlink -f "$(dirname -- "${BASH_SOURCE[0]:-${0:A}}")/../")"
SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]:-${0:A}}")")" && pwd)"
KEYCUTTER_ROOT="$(cd -- "$SCRIPT_DIR/../" && pwd)"
source "${KEYCUTTER_ROOT}/lib/functions"

[ -t 0 ] || exec </dev/tty # reattach keyboard to STDIN

# If run on ORIGIN (not connected by SSH), default KEYCUTTER_ORIGIN to local hostname.
# Track whether KEYCUTTER_ORIGIN was explicitly set
KEYCUTTER_ORIGIN_EXPLICIT=${KEYCUTTER_ORIGIN:+true}
[[ -z $SSH_CONNECTION ]] && : ${KEYCUTTER_ORIGIN:="$(hostname -s)"}

# Set any undefined environment variables to default values
: ${KEYCUTTER_CONFIG:="${HOME}/.ssh/keycutter/keycutter.conf"}
: ${KEYCUTTER_CONFIG_DIR:="$(dirname "${KEYCUTTER_CONFIG}")"}
: ${KEYCUTTER_SSH_KEY_DIR:="${KEYCUTTER_CONFIG_DIR}/keys"}

: ${KEYCUTTER_SSH_KEY_TYPE_SK:="ed25519-sk"} # was ecdsa-sk
: ${KEYCUTTER_SSH_KEY_TYPE_NON_SK:="ed25519"}
: ${KEYCUTTER_SSH_KEY_TYPES:="ecdsa-sk ed25519-sk rsa ecdsa ed25519"}

# Prerequisites:
#
# - Bash >= 4.0
# - Git >= 2.34.0 # XXX Still needed?
# - GitHub CLI >= 2.0 (Greater than 2.4.0+dfsg1-2 on Ubuntu)
# - OpenSSH >= 8.2p1
# - YubiKey Manager
#
# WSL (Windows Subsystem for Linux) Setup:
#
#   WSL does not support USB devices natively, so we need to use Windows OpenSSH to access the YubiKey.
#   This requires a recent version of OpenSSH for Windows and a helper program to access the YubiKey.
#
#   Download and install a recent version of OpenSSH for Windows. This will give you 'ssh-sk-helper.exe'
#   1. Download and install a recent OpenSSH for Windows:
#        OpenSSH for Windows: https://github.com/PowerShell/Win32-OpenSSH/releases
#   2. Tell WSL OpenSSH to ask Windows for help:
#
#        echo 'export SSH_SK_HELPER="/mnt/c/Program Files/OpenSSH/ssh-sk-helper.exe"' >> ~/.bashrc
#
# Recommendations:
#
#   1. Use separate Github account per security domain (personal, work, public).
#      This will give you more freedom to login to GitHub on a device you trust
#      with that account without crossing security boundaries.
#
#   2. Only use GitHub CLI from a device you trust with that GitHub account.
#      E.g. Don't login to your personal GitHub account from a managed laptop.
#

usage() {
  echo "Usage:"
  echo "       $(basename "$0") <command> [arguments]"
  echo
  echo "Commands:"
  echo "       create <ssh-keytag> [--resident] [--type <value>] Create a new SSH key"
  echo "       check-requirements                                Check if all required software is installed"
  echo "       authorized-keys <hostname>                        Show public keys that would be offered to host"
  echo "       push-keys <hostname>                             Push public keys to remote host"
  echo "       update                                            Update keycutter from git and refresh config"
  echo "       config <hostname>                                 Show config relevant to host"
  echo "       agents                                            List all agents"
  echo "       hosts                                             List all hosts"
  echo "       hosts edit <filename>                             Edit host configuration file"
  echo "       keys                                              List all keys"
  echo
  echo "Agent commands:"
  echo "       agent show <agent>                                Show agent details"
  echo "       agent keys <agent>                                List keys in agent"
  echo "       agent hosts <agent>                               List hosts using agent"
  echo "       agent add-key <agent> <key>                       Add key to agent"
  echo "       agent remove-key <agent> <key>                    Remove key from agent"
  echo
  echo "Host commands:"
  echo "       host show <host>                                  Show host config"
  echo "       host agent <host> [agent]                         Get/set agent for host"
  echo "       host keys <host>                                  List keys for host"
  echo "       host config <host>                                Show SSH config for host"
  echo "       host edit <host>                                  Edit the file containing host"
  echo
  echo "Key commands:"
  echo "       key show <key>                                    Show key details"
  echo "       key agents <key>                                  List agents containing key"
  echo "       key hosts <key>                                   List hosts using key"
  echo
  echo "For create command:"
  echo "  ssh-keytag Required. Identifier for key (e.g. github.com_alex@laptop-personal)"
  echo "  --resident Optional. Create resident FIDO SSH key (default is non-resident)"
  echo "  --type     Optional. Which cryptographic key to use (ecdsa-sk, ed25519-sk, rsa, ecdsa, ed25519)"
  echo "                       Default is ed25519-sk"
  echo
  echo "For config command:"
  echo "  hostname   Required. The SSH hostname to analyze (e.g. github.com, server.example.com)"
  echo
  echo "SSH Keytag format: service_user@device"
  echo "  - service : Service this key is used with (e.g. 'github.com', 'aws', 'digitalocean')"
  echo "  - user    : Service User this SSH Key authenticates as (e.g. 'alex')"
  echo "  - device  : Device this ssh key resides on (e.g. 'yubikey1', 'work-laptop', 'zfold5')"
}

keycutter-create() {

  if [[ $# -lt 1 ]]; then
    usage
    exit 1
  fi

  # Set default values, override with command line options
  local ssh_key_resident=""
  local ssh_key_type="$KEYCUTTER_SSH_KEY_TYPE_SK"
  local ssh_keytag=""

  local KEYCUTTER_CONFIG_DIR="$(dirname "${KEYCUTTER_CONFIG}")"

  while (("$#")); do
    case "$1" in
    --resident)
      ssh_key_resident="yes"
      shift
      ;;
    --type)
      ssh_key_type="$2"
      shift 2
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    *)
      if [[ -z $ssh_keytag ]]; then
        ssh_keytag="$1"
      else
        log "Error: Invalid option $1"
        usage
        exit 1
      fi
      shift
      ;;
    esac
  done

  if [[ -z "$ssh_keytag" ]]; then
    usage
    exit 1
  fi

  # Check if the ssh_keytag ends with @$KEYCUTTER_ORIGIN
  if [[ ! "$ssh_keytag" =~ @${KEYCUTTER_ORIGIN}$ ]]; then
    local ssh_keytag_proposed="${ssh_keytag/@*/}@${KEYCUTTER_ORIGIN}"
    log "Info: Using the SSH Keytag convention allows the magic to happen"
    if [[ -z $KEYCUTTER_ORIGIN_EXPLICIT ]]; then
      log "Tip: Use an alias instead of hostname by setting KEYCUTTER_ORIGIN env var."
    fi
    log "See also: https://github.com/mbailey/keycutter/blob/master/docs/ssh-keytags.md"
    log ""
    prompt "Append the current device to the SSH Keytag? (${ssh_keytag_proposed}). (Y/n) "
    read -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
      log "Proceeding with original ssh_keytag: $ssh_keytag"
    else
      ssh_keytag="${ssh_keytag_proposed}"
      log "Updated ssh_keytag to: $ssh_keytag"
    fi
  fi

  local ssh_key_path="${KEYCUTTER_CONFIG_DIR}/keys/${ssh_keytag}" # Path SSH key will be written to

  # Ensure config dirs exists wth correct perms
  dir-ensure "$KEYCUTTER_CONFIG_DIR" 0700
  dir-ensure "$(dirname "$ssh_key_path")" 0700

  # Create SSH Key for $ssh_keytag
  log "Generating SSH key: $ssh_key_path"
  case "$ssh_key_type" in
  ecdsa-sk | ed25519-sk)
    ssh-keygen -t "$ssh_key_type" -f "$ssh_key_path" -C "$ssh_keytag" ${ssh_key_resident:+-O resident}
    ;;
  rsa)
    ssh-keygen -t "$ssh_key_type" -b 4096 -f "$ssh_key_path" -C "$ssh_keytag"
    ;;
  ecdsa | ed25519)
    ssh-keygen -t "$ssh_key_type" -f "$ssh_key_path" -C "$ssh_keytag"
    ;;
  *)
    log "Error: Unsupported key type: $ssh_key_type"
    return 1
    ;;
  esac
  local case_exit_code=$?
  if [[ case_exit_code -ne 0 ]]; then
    log "WARNING No key was created"
    return $case_exit_code
  fi

  chmod 0600 "${ssh_key_path}.pub"

  # If the SSH Keytag includes github.com
  local service="$(_ssh-keytag-service "$ssh_keytag")"
  if [[ $service =~ github.com ]]; then
    # Optionally add SSH key to GitHub for auth and commit/tag signing: $ssh_key_path
    github-ssh-key-add "$ssh_key_path" "$ssh_keytag"
    local demo_message="\nYou can SSH to GitHub by running:\n\n ssh -T $(_ssh-keytag-service-identity "$ssh_key_path")\n"
    # Option to access GitHub when firewall blocks outbound port 22
    prompt "Symlink key to enable ssh.github.com:443? [Y/n] "
    read -n 1 -r
    echo
    if ! [[ $REPLY =~ ^[Nn]$ ]]; then
      log "Creating symlink: ln -sf $ssh_key_path ${ssh_key_path/github.com/ssh.github.com}"
      ln -sf "$ssh_key_path" "${ssh_key_path/github.com/ssh.github.com}"
    fi
  else
    log "DEBUG Skipping GitHub specific setup - SSH Keytag identity part doesn't contain 'github.com'."
  fi

  log "Success! Setup complete for key: $ssh_keytag"

  if [[ -n ${demo_message:-} ]]; then
    echo -e "$demo_message" # Only for GitHub keys
  fi
}

keycutter-authorized-keys() {
  ssh-authorized-keys "$@"
}

keycutter-push-keys() {
  local host="$1"
  
  if [[ -z "$host" ]]; then
    log "Error: Host required"
    return 1
  fi
  
  # Get the authorized keys for this host
  local authorized_keys=$(keycutter authorized-keys "$host")
  
  if [[ -z "$authorized_keys" ]]; then
    log "Error: No authorized keys found for host: $host"
    return 1
  fi
  
  # Create a temporary file with .pub extension as ssh-copy-id expects
  local temp_key_file=$(mktemp --suffix=.pub)
  echo "$authorized_keys" > "$temp_key_file"
  
  # First try with existing key authentication (BatchMode=yes prevents password prompts)
  log "Attempting to push keys to $host..."
  
  if ssh-copy-id \
    -f \
    -o BatchMode=yes \
    -o RemoteCommand=none \
    -o ConnectTimeout=5 \
    -i "$temp_key_file" \
    "$host" 2>/dev/null; then
    log "Successfully pushed keys to $host using existing authentication"
    rm -f "$temp_key_file"
    return 0
  fi
  
  # Fall back to password authentication
  log "Key authentication failed, trying password authentication..."
  
  ssh-copy-id \
    -f \
    -o PreferredAuthentications=password \
    -o RemoteCommand=none \
    -i "$temp_key_file" \
    "$host"
  
  local result=$?
  rm -f "$temp_key_file"
  
  if [[ $result -eq 0 ]]; then
    log "Successfully pushed keys to $host"
  else
    log "Error: Failed to push keys to $host"
    return 1
  fi
}

keycutter-list() {
  # ssh-keys-fido
  github-ssh-keys
}

keycutter-update() {
  keycutter-update-git
  check_requirements
  keycutter-update-ssh-config
}

keycutter-update-git() {
  log "Updating Keycutter from git..."

  # Check if we're in a git repository
  if ! git -C "${KEYCUTTER_ROOT}" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    log "Error: ${KEYCUTTER_ROOT} is not a git repository."
    return 1
  fi

  # Change to the KEYCUTTER_ROOT directory
  cd "${KEYCUTTER_ROOT}" || {
    log "Error: Unable to change to directory ${KEYCUTTER_ROOT}"
    return 1
  }

  # Get the current branch name
  local current_branch=$(git symbolic-ref --short HEAD)
  if [ -z "$current_branch" ]; then
    log "Error: Unable to determine current branch."
    return 1
  fi

  # Check if we're on the master branch
  if [[ "$current_branch" != "master" ]]; then
    log "Not on master branch. Current branch is $current_branch. Skipping update."
    return 0
  fi

  # Fetch the latest changes
  if ! git fetch origin; then
    log "Error: Failed to fetch updates from remote repository."
    return 1
  fi

  # Check if there are any changes to pull
  local behind_by=$(git rev-list HEAD..origin/"$current_branch" --count 2>/dev/null)
  if [ $? -ne 0 ]; then
    log "Error: Unable to determine if there are updates available."
    return 1
  fi

  if [ -z "$behind_by" ] || [ "$behind_by" -eq 0 ]; then
    log "Keycutter is already up to date."
    return 0
  fi

  # Pull the latest changes
  if ! git pull origin "$current_branch"; then
    log "Error: Failed to pull updates from remote repository."
    return 1
  fi

  log "Keycutter git update complete."
}

keycutter-update-ssh-config() {

  local src_dir="${KEYCUTTER_ROOT}/ssh_config/keycutter"
  local dest_dir="${KEYCUTTER_CONFIG_DIR}"

  # Find all files in the source directory
  for src_file in $(find "$src_dir" -type f); do
    # Get relative path from source directory
    local rel_path="${src_file#${src_dir}/}"
    local dest_file="${dest_dir}/${rel_path}"
    
    # Create destination directory if it doesn't exist
    local dest_subdir="$(dirname "$dest_file")"
    [[ -d "$dest_subdir" ]] || mkdir -p "$dest_subdir"
    
    # Check if file exists
    if [[ -f "$dest_file" ]]; then
      # Special handling for hosts directory - never overwrite
      if [[ "$rel_path" =~ ^hosts/ && "$rel_path" != "hosts/.README.md" ]]; then
        log "Preserving existing host file: $dest_file"
        continue
      fi
      
      # For other files, show diff and prompt
      if ! cmp -s "$src_file" "$dest_file"; then
        log "File is different: $dest_file"
        diff -u "$dest_file" "$src_file" || true
        prompt "Overwrite? [y/N] "
        read -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          apply-template "$src_file" "$dest_file"
          log "Updated file: $dest_file"
        else
          log "Skipped update: $dest_file"
        fi
      else
        log "File is up to date: $dest_file"
      fi
    else
      # File doesn't exist, create it
      apply-template "$src_file" "$dest_file"
      log "Created new file: $dest_file"
    fi
  done

  # Add Include directive to the main SSH config file
  prepend-line-if-missing "${HOME}/.ssh/config" "Include ${KEYCUTTER_CONFIG#${HOME}/.ssh/}"

  log "Keycutter SSH update complete."
}

keycutter-check-requirements() {
  check_requirements
}

keycutter-config() {
  if [[ $# -lt 1 ]]; then
    log "Error: Hostname is required for config command"
    usage
    return 1
  fi

  local hostname="$1"
  local libexec_path="${KEYCUTTER_ROOT}/libexec/keycutter/ssh-config-impact"

  if [[ ! -x "$libexec_path" ]]; then
    log "Error: Required script not found or not executable: $libexec_path"
    return 1
  fi

  "$libexec_path" "$hostname"
}

keycutter-agents() {
  local agents_dir="${KEYCUTTER_CONFIG_DIR}/agents"

  if [[ ! -d "$agents_dir" ]]; then
    log "No agents directory found at $agents_dir"
    return 1
  fi

  log "SSH Agent Profiles:"
  for agent_path in "$agents_dir"/*/; do
    if [[ -d "$agent_path" ]]; then
      local agent_name=$(basename "$agent_path")
      echo "  $agent_name"
    fi
  done
}

keycutter-hosts() {
  if [[ $# -gt 0 ]]; then
    local subcmd="$1"
    shift
    case "$subcmd" in
    edit)
      keycutter-hosts-edit "$@"
      ;;
    *)
      # Default behavior - list hosts
      keycutter-hosts-list
      ;;
    esac
  else
    keycutter-hosts-list
  fi
}

keycutter-hosts-list() {
  local ssh_config="${HOME}/.ssh/config"
  local hosts_dir="${KEYCUTTER_CONFIG_DIR}/hosts"

  log "Configured hosts:"

  # Extract Host patterns from SSH config
  if [[ -f "$ssh_config" ]]; then
    grep -h "^Host " "$ssh_config" "$KEYCUTTER_CONFIG" "$hosts_dir"/* 2>/dev/null |
      awk '{for(i=2;i<=NF;i++) print $i}' |
      grep -v "\*" |
      sort -u |
      while read -r host; do
        echo "  $host"
      done
  fi
}

keycutter-hosts-edit() {
  if [[ $# -lt 1 ]]; then
    log "Error: Host file name required"
    echo "Usage: keycutter hosts edit <filename>"
    return 1
  fi

  local filename="$1"
  local hosts_dir="${KEYCUTTER_CONFIG_DIR}/hosts"
  local file_path="${hosts_dir}/${filename}"

  # Use EDITOR environment variable, fall back to vim
  local editor="${EDITOR:-vim}"

  if [[ ! -f "$file_path" ]]; then
    log "Creating new host file: $file_path"
  fi

  "$editor" "$file_path"
}

keycutter-keys() {
  local keys_dir="${KEYCUTTER_SSH_KEY_DIR}"

  if [[ ! -d "$keys_dir" ]]; then
    log "No keys directory found at $keys_dir"
    return 1
  fi

  log "SSH Keys:"
  for key_file in "$keys_dir"/*; do
    if [[ -f "$key_file" && ! "$key_file" =~ \.pub$ && ! $(basename "$key_file") =~ ^\. ]]; then
      local key_name=$(basename "$key_file")
      echo "  $key_name"
    fi
  done
}

# Agent subcommands
keycutter-agent() {
  local subcmd="$1"
  shift

  case "$subcmd" in
  show)
    keycutter-agent-show "$@"
    ;;
  keys)
    keycutter-agent-keys "$@"
    ;;
  hosts)
    keycutter-agent-hosts "$@"
    ;;
  add-key)
    keycutter-agent-add-key "$@"
    ;;
  remove-key)
    keycutter-agent-remove-key "$@"
    ;;
  *)
    log "Error: Unknown agent subcommand: $subcmd"
    usage
    exit 1
    ;;
  esac
}

keycutter-agent-show() {
  if [[ $# -lt 1 ]]; then
    log "Error: Agent name required"
    return 1
  fi

  local agent="$1"
  local agent_dir="${KEYCUTTER_CONFIG_DIR}/agents/$agent"
  local keys_dir="${agent_dir}/keys"

  if [[ ! -d "$agent_dir" ]]; then
    log "Error: Agent '$agent' not found"
    return 1
  fi

  log "Agent: $agent"

  # Show keys in agent
  log "Keys:"
  if [[ -d "$keys_dir" ]]; then
    for key_link in "$keys_dir"/*; do
      if [[ -L "$key_link" && ! $(basename "$key_link") =~ ^\. ]]; then
        local key_name=$(basename "$key_link")
        echo "  $key_name"
      fi
    done
  fi

  # Also check for keys directly in agent directory for compatibility
  for key_link in "$agent_dir"/*; do
    if [[ -L "$key_link" && ! $(basename "$key_link") =~ ^\. && "$key_link" != */keys ]]; then
      local key_name=$(basename "$key_link")
      echo "  $key_name"
    fi
  done

  # Show hosts using this agent
  log ""
  log "Hosts using this agent:"
  grep -h "IdentityAgent.*agents/$agent" "${HOME}/.ssh/config" "$KEYCUTTER_CONFIG" "${KEYCUTTER_CONFIG_DIR}/hosts"/* 2>/dev/null |
    grep -B5 "IdentityAgent" | grep "^Host " |
    awk '{for(i=2;i<=NF;i++) print $i}' |
    sort -u |
    while read -r host; do
      echo "  $host"
    done
}

keycutter-agent-keys() {
  if [[ $# -lt 1 ]]; then
    log "Error: Agent name required"
    return 1
  fi

  local agent="$1"
  local agent_dir="${KEYCUTTER_CONFIG_DIR}/agents/$agent"
  local keys_dir="${agent_dir}/keys"

  if [[ ! -d "$agent_dir" ]]; then
    log "Error: Agent '$agent' not found"
    return 1
  fi

  log "Keys in agent '$agent':"
  # Check keys subdirectory first
  if [[ -d "$keys_dir" ]]; then
    for key_link in "$keys_dir"/*; do
      if [[ -L "$key_link" && ! $(basename "$key_link") =~ ^\. ]]; then
        local key_name=$(basename "$key_link")
        echo "  $key_name"
      fi
    done
  fi

  # Also check for keys directly in agent directory for compatibility
  for key_link in "$agent_dir"/*; do
    if [[ -L "$key_link" && ! $(basename "$key_link") =~ ^\. && "$key_link" != */keys ]]; then
      local key_name=$(basename "$key_link")
      echo "  $key_name"
    fi
  done
}

keycutter-agent-hosts() {
  if [[ $# -lt 1 ]]; then
    log "Error: Agent name required"
    return 1
  fi

  local agent="$1"

  log "Hosts using agent '$agent':"
  grep -h "IdentityAgent.*agents/$agent" "${HOME}/.ssh/config" "$KEYCUTTER_CONFIG" "${KEYCUTTER_CONFIG_DIR}/hosts"/* 2>/dev/null |
    grep -B5 "IdentityAgent" | grep "^Host " |
    awk '{for(i=2;i<=NF;i++) print $i}' |
    sort -u |
    while read -r host; do
      echo "  $host"
    done
}

keycutter-agent-add-key() {
  if [[ $# -lt 2 ]]; then
    log "Error: Agent name and key name required"
    return 1
  fi

  local agent="$1"
  local key="$2"
  local agent_dir="${KEYCUTTER_CONFIG_DIR}/agents/$agent"
  local keys_dir="${agent_dir}/keys"
  local key_path="${KEYCUTTER_SSH_KEY_DIR}/$key"

  if [[ ! -d "$agent_dir" ]]; then
    log "Error: Agent '$agent' not found"
    return 1
  fi

  if [[ ! -f "$key_path" ]]; then
    log "Error: Key '$key' not found"
    return 1
  fi

  # Create keys subdirectory if it doesn't exist
  [[ ! -d "$keys_dir" ]] && mkdir -p "$keys_dir"

  # Create symlink in keys subdirectory
  ln -sf "../../../keys/$key" "$keys_dir/$key"
  log "Added key '$key' to agent '$agent'"
}

keycutter-agent-remove-key() {
  if [[ $# -lt 2 ]]; then
    log "Error: Agent name and key name required"
    return 1
  fi

  local agent="$1"
  local key="$2"
  local keys_dir="${KEYCUTTER_CONFIG_DIR}/agents/$agent/keys"
  local link_path="${keys_dir}/$key"
  local alt_link_path="${KEYCUTTER_CONFIG_DIR}/agents/$agent/$key"

  # Check both locations for the key
  if [[ -L "$link_path" ]]; then
    rm "$link_path"
    log "Removed key '$key' from agent '$agent'"
  elif [[ -L "$alt_link_path" ]]; then
    rm "$alt_link_path"
    log "Removed key '$key' from agent '$agent'"
  else
    log "Error: Key '$key' not found in agent '$agent'"
    return 1
  fi
}

# Host subcommands
keycutter-host() {
  local subcmd="$1"
  shift

  case "$subcmd" in
  show)
    keycutter-host-show "$@"
    ;;
  agent)
    keycutter-host-agent "$@"
    ;;
  keys)
    keycutter-host-keys "$@"
    ;;
  config)
    keycutter-host-config "$@"
    ;;
  edit)
    keycutter-host-edit "$@"
    ;;
  *)
    log "Error: Unknown host subcommand: $subcmd"
    usage
    exit 1
    ;;
  esac
}

keycutter-host-show() {
  if [[ $# -lt 1 ]]; then
    log "Error: Host name required"
    return 1
  fi

  local host="$1"

  # Show commonly customized SSH config values
  # This list can be expanded based on what users typically care about
  local important_fields="hostname|user|port|identityfile|identityagent|forwardagent|localforward|remoteforward|dynamicforward|identitiesonly|hashknownhosts|serveralivecountmax|serveraliveinterval|proxycommand|proxyjump|requesttty|remotecommand|sendenv|tag|userknownhostsfile|stricthostkeychecking|checkhostip|controlmaster|controlpath|controlpersist"
  
  ssh -G "$host" | grep -E "^($important_fields)" | sort | while read -r line; do
    # Skip default values that are rarely customized
    case "$line" in
      "user $(whoami)"|"port 22"|"hostname $host"|"userknownhostsfile ${HOME}/.ssh/known_hosts ${HOME}/.ssh/known_hosts2")
        continue
        ;;
    esac
    echo "  $line"
  done
}

keycutter-host-agent() {
  if [[ $# -lt 1 ]]; then
    log "Error: Host name required"
    return 1
  fi

  local host="$1"
  local agent="$2"

  if [[ -z "$agent" ]]; then
    # Get current agent
    local current_agent=$(ssh -G "$host" | grep '^identityagent' | awk '{print $2}')
    if [[ -n "$current_agent" ]]; then
      echo "Agent for $host: $(basename $(dirname "$current_agent"))"
    else
      echo "No agent configured for $host"
    fi
  else
    # Set agent - would need to modify SSH config
    log "Setting agent for hosts is not yet implemented"
    return 1
  fi
}

keycutter-host-keys() {
  if [[ $# -lt 1 ]]; then
    log "Error: Host name required"
    return 1
  fi

  local host="$1"

  # List current keys
  log "Identity files for $host:"
  ssh -G "$host" | grep '^identityfile' | awk '{print $2}' | while read -r keyfile; do
    echo "  $(basename "$keyfile")"
  done
}

keycutter-host-config() {
  if [[ $# -lt 1 ]]; then
    log "Error: Host name required"
    return 1
  fi

  local host="$1"
  keycutter-config "$host"
}

keycutter-host-edit() {
  if [[ $# -lt 1 ]]; then
    log "Error: Host name required"
    echo "Usage: keycutter host edit <hostname>"
    return 1
  fi

  local hostname="$1"
  local hosts_dir="${KEYCUTTER_CONFIG_DIR}/hosts"
  local editor="${EDITOR:-vim}"
  local found_file=""

  # Search for the host in all host files
  for host_file in "$hosts_dir"/*.conf "$hosts_dir"/*; do
    if [[ -f "$host_file" && "$host_file" != *.README.md ]]; then
      if grep -q "^[[:space:]]*Host[[:space:]].*[[:space:]]${hostname}[[:space:]]*$\|^[[:space:]]*Host[[:space:]].*[[:space:]]${hostname}[[:space:]]" "$host_file" 2>/dev/null; then
        found_file="$host_file"
        break
      fi
    fi
  done

  if [[ -n "$found_file" ]]; then
    log "Opening $found_file for host: $hostname"
    "$editor" "$found_file"
  else
    log "Host '$hostname' not found in any configuration file"
    log "Available host files:"
    for f in "$hosts_dir"/*.conf "$hosts_dir"/*; do
      if [[ -f "$f" && "$f" != *.README.md ]]; then
        echo "  $(basename "$f")"
      fi
    done
    return 1
  fi
}

# Key subcommands
keycutter-key() {
  local subcmd="$1"
  shift

  case "$subcmd" in
  show)
    keycutter-key-show "$@"
    ;;
  agents)
    keycutter-key-agents "$@"
    ;;
  hosts)
    keycutter-key-hosts "$@"
    ;;
  *)
    log "Error: Unknown key subcommand: $subcmd"
    usage
    exit 1
    ;;
  esac
}

keycutter-key-show() {
  if [[ $# -lt 1 ]]; then
    log "Error: Key name required"
    return 1
  fi

  local key="$1"
  local key_path="${KEYCUTTER_SSH_KEY_DIR}/$key"

  if [[ ! -f "$key_path" ]]; then
    log "Error: Key '$key' not found"
    return 1
  fi

  log "Key: $key"

  # Show key fingerprint
  if command -v ssh-keygen &>/dev/null; then
    log "Fingerprint:"
    ssh-keygen -lf "$key_path"
  fi

  # Show which agents contain this key
  keycutter-key-agents "$key"

  # Show which hosts use this key
  keycutter-key-hosts "$key"
}

keycutter-key-agents() {
  if [[ $# -lt 1 ]]; then
    log "Error: Key name required"
    return 1
  fi

  local key="$1"

  log "Agents containing key '$key':"
  for agent_dir in "${KEYCUTTER_CONFIG_DIR}/agents"/*/; do
    # Check in keys subdirectory first
    if [[ -L "$agent_dir/keys/$key" ]]; then
      echo "  $(basename "$agent_dir")"
    # Also check in agent directory directly
    elif [[ -L "$agent_dir/$key" ]]; then
      echo "  $(basename "$agent_dir")"
    fi
  done
}

keycutter-key-hosts() {
  if [[ $# -lt 1 ]]; then
    log "Error: Key name required"
    return 1
  fi

  local key="$1"

  log "Hosts using key '$key':"
  # Search for hosts that have this key in their identity files
  grep -h "IdentityFile.*$key" "${HOME}/.ssh/config" "$KEYCUTTER_CONFIG" "${KEYCUTTER_CONFIG_DIR}/hosts"/* 2>/dev/null |
    grep -B5 "IdentityFile.*$key" | grep "^Host " |
    awk '{for(i=2;i<=NF;i++) print $i}' |
    sort -u |
    while read -r host; do
      echo "  $host"
    done
}

# YubiKey subcommands

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
    usage
    exit 1
  fi

  cmd="$1"
  shift

  case "$cmd" in
  create | authorized-keys | push-keys | update | check-requirements | config | agents | hosts | keys)
    "keycutter-$cmd" "$@"
    ;;
  agent | host | key)
    "keycutter-$cmd" "$@"
    ;;
  *)
    log "Error: Unknown command: $cmd"
    usage
    exit 1
    ;;
  esac
fi
