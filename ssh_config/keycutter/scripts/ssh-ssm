#!/usr/bin/env bash
set -o nounset -o pipefail -o errexit

# ssh-ssm (modified) - SSH over AWS SSM
#
# Original: https://github.com/elpy1/ssh-over-ssm/blob/master/ssh-ssm.sh

instance="${1:-}"
ssh_user="${2:-}"
remote_host="$instance"

die () { echo "[${0##*/}] $*" >&2; exit 1; }
make_ssh_keys () { ssh-keygen -t rsa -N '' -f ${SSH_TMP_KEY} -C ssh-over-ssm; }
clean_ssh_keys () { rm -f ${SSH_TMP_KEY}{,.pub}; }

[[ $# -lt 2 ]] && die "usage: ${0##*/} <instance-id> <ssh user> [<keyfile>]"
[[ ! $instance =~ ^i-([0-9a-f]{8,})$ ]] && die "error: invalid instance-id"

ec2-instance-start() {
  local instances="${1:-}"

  # Start instance if stopped
  instance_state=$(
    aws ec2 describe-instances \
      --instance-ids "$instances" \
      --query 'Reservations[*].Instances[*].State.Name' \
      --output text
  ) || die "error: instance not found"
  if [[ $instance_state == "stopped" ]]; then
    echo 2>&1 "Starting ec2 instance $instances"
    aws ec2 start-instances --instance-ids "$instances"
    aws ec2 wait instance-running --instance-ids "$instances"
  fi
}

copy-public-key-to-instance() {

  SSH_TMP_KEY="${HOME}/.ssh/keycutter/keys/ssm-ssh-tmp-key"

  : ${KEYCUTTER_SSH_SSM_PUB_KEY:=''}
  if [[ -n $KEYCUTTER_SSH_SSM_PUB_KEY && -f $KEYCUTTER_SSH_SSM_PUB_KEY ]]; then
    cp "${KEYCUTTER_SSH_SSM_PUB_KEY}" "${SSH_TMP_KEY}.pub"
  fi

  [[ -f ${SSH_TMP_KEY}.pub ]] || make_ssh_keys
  trap clean_ssh_keys EXIT
  SSH_PUB_KEY="$(< ${SSH_TMP_KEY}.pub)"

  # Put public SSH key on remote server for 15 seconds (user must already exist)
  ssm_cmd=$(cat <<EOF
    "u=\$(getent passwd ${ssh_user}) && x=\$(echo \$u |cut -d: -f6) || exit 1
    [ ! -d \${x}/.ssh ] && install -d -m700 -o${ssh_user} \${x}/.ssh
    grep '${SSH_PUB_KEY}' \${x}/.ssh/authorized_keys && exit 0
    printf '${SSH_PUB_KEY}\n'|tee -a \${x}/.ssh/authorized_keys || exit 1
    (sleep 15 && sed -i '\|${SSH_PUB_KEY}|d' \${x}/.ssh/authorized_keys &) >/dev/null 2>&1"
EOF
  )

  # execute the command using aws ssm send-command
  command_id=$(aws ssm send-command \
    --instance-ids "$instance" \
    --document-name "AWS-RunShellScript" \
    --parameters commands="${ssm_cmd}" \
    --comment "temporary ssm ssh access" \
    --output text \
    --query Command.CommandId)

  # wait for successful send-command execution
  aws ssm wait command-executed --instance-id "$instance" --command-id "${command_id}"
}

ec2-instance-start "$instance"
[[ -n ${NO_COPY_KEY:-} ]] || copy-public-key-to-instance
# start ssh session over ssm
aws ssm start-session --document-name AWS-StartSSHSession --target "$instance"
