#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]:-${0:A}}")")" && pwd)"
KEYCUTTER_ROOT="$(cd -- "$SCRIPT_DIR/../../" && pwd)"
source "${KEYCUTTER_ROOT}/lib/functions"

# Detect operating system
detect_os() {
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo "linux"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    echo "macos"
  else
    echo "unsupported"
  fi
}

# Check if touch detector is already installed
check_existing_installation() {
  local os="$1"
  
  case "$os" in
    linux)
      if command -v yubikey-touch-detector &>/dev/null; then
        return 0
      elif [[ -f /usr/local/bin/yubikey-touch-detector ]] || [[ -f /usr/bin/yubikey-touch-detector ]]; then
        return 0
      elif systemctl --user is-active yubikey-touch-detector.service &>/dev/null; then
        return 0
      fi
      ;;
    macos)
      if command -v yknotify &>/dev/null; then
        return 0
      elif launchctl list | grep -q com.user.yknotify; then
        return 0
      fi
      ;;
  esac
  
  return 1
}

# Main installation flow
main() {
  local os=$(detect_os)
  
  if [[ "$os" == "unsupported" ]]; then
    log "Error: Unsupported operating system: $OSTYPE"
    log "YubiKey touch detection is only supported on Linux and macOS"
    return 1
  fi
  
  log "YubiKey Touch Detector Installation"
  log "===================================="
  log ""
  log "This tool provides notifications when your YubiKey is waiting for a touch."
  log "It helps prevent timeouts and improves the user experience."
  log ""
  
  # Check for existing installation
  if check_existing_installation "$os"; then
    log "YubiKey touch detector appears to be already installed."
    prompt "Would you like to reinstall/reconfigure it? [y/N] "
    read -n 1 -r
    echo
    if [[ ! ${REPLY:-} =~ ^[Yy]$ ]]; then
      log "Installation cancelled."
      return 0
    fi
  fi
  
  # Platform-specific installation
  case "$os" in
    linux)
      log "Detected Linux system"
      log ""
      log "Options:"
      log "  1. Package manager install (recommended if available)"
      log "  2. Download pre-built binary from GitHub"
      log "  3. Build from source"
      log "  4. Cancel"
      log ""
      prompt "Select installation method [1-4]: "
      read -n 1 -r choice
      echo
      
      case "${choice:-}" in
        1) install_linux_package ;;
        2) install_linux_binary ;;
        3) install_linux_source ;;
        4) log "Installation cancelled."; return 0 ;;
        *) log "Invalid choice"; return 1 ;;
      esac
      ;;
      
    macos)
      log "Detected macOS system"
      log ""
      log "Options:"
      log "  1. Install yknotify (recommended - lightweight, reliable)"
      log "  2. Install gpg-tap-notifier-macos (better GPG integration)"
      log "  3. Cancel"
      log ""
      prompt "Select installation method [1-3]: "
      read -n 1 -r choice
      echo
      
      case "${choice:-}" in
        1) install_macos_yknotify ;;
        2) install_macos_gpg_tap_notifier ;;
        3) log "Installation cancelled."; return 0 ;;
        *) log "Invalid choice"; return 1 ;;
      esac
      ;;
  esac
}

# Linux: Package manager installation
install_linux_package() {
  log "Checking for package manager support..."
  
  if command -v pacman &>/dev/null; then
    log "Found pacman (Arch Linux)"
    sudo pacman -S yubikey-touch-detector
  elif command -v apt-get &>/dev/null; then
    log "Installing dependencies for Ubuntu/Debian..."
    sudo apt-get update
    sudo apt-get install -y libgpgme-dev golang
    install_linux_source
  elif command -v dnf &>/dev/null; then
    log "Installing dependencies for Fedora..."
    sudo dnf install -y gpgme-devel golang
    install_linux_source
  elif command -v zypper &>/dev/null; then
    log "Installing dependencies for openSUSE..."
    sudo zypper install -y libgpgme-devel go
    install_linux_source
  else
    log "Package manager not supported. Falling back to binary installation."
    install_linux_binary
  fi
  
  setup_linux_systemd
}

# Linux: Binary installation
install_linux_binary() {
  log "Downloading pre-built binary from GitHub..."
  
  local arch=$(uname -m)
  local download_arch=""
  
  case "$arch" in
    x86_64) download_arch="amd64" ;;
    aarch64) download_arch="arm64" ;;
    armv7l) download_arch="armv7" ;;
    *) log "Error: Unsupported architecture: $arch"; return 1 ;;
  esac
  
  local release_url="https://api.github.com/repos/maximbaz/yubikey-touch-detector/releases/latest"
  local download_url=$(curl -s "$release_url" | grep -o "https://.*yubikey-touch-detector-.*linux.*${download_arch}.*" | head -1)
  
  if [[ -z "$download_url" ]]; then
    log "Error: Could not find download URL for your architecture"
    return 1
  fi
  
  local temp_dir=$(mktemp -d)
  cd "$temp_dir"
  
  log "Downloading from: $download_url"
  curl -L -o yubikey-touch-detector.tar.gz "$download_url"
  tar -xzf yubikey-touch-detector.tar.gz
  
  sudo install -m 755 yubikey-touch-detector /usr/local/bin/
  
  # Download systemd files
  curl -s -o yubikey-touch-detector.service https://raw.githubusercontent.com/maximbaz/yubikey-touch-detector/main/yubikey-touch-detector.service
  curl -s -o yubikey-touch-detector.socket https://raw.githubusercontent.com/maximbaz/yubikey-touch-detector/main/yubikey-touch-detector.socket
  
  mkdir -p ~/.config/systemd/user
  cp yubikey-touch-detector.{service,socket} ~/.config/systemd/user/
  
  cd - >/dev/null
  rm -rf "$temp_dir"
  
  setup_linux_systemd
}

# Linux: Source installation
install_linux_source() {
  log "Building from source..."
  
  # Check for Go
  if ! command -v go &>/dev/null; then
    log "Error: Go is not installed. Please install Go first."
    return 1
  fi
  
  # Check for gpgme
  if ! pkg-config --exists gpgme 2>/dev/null; then
    log "Error: libgpgme-dev is not installed. Please install it first."
    return 1
  fi
  
  log "Installing yubikey-touch-detector via Go..."
  go install github.com/maximbaz/yubikey-touch-detector@latest
  
  # Copy binary to system location
  if [[ -f "$HOME/go/bin/yubikey-touch-detector" ]]; then
    sudo cp "$HOME/go/bin/yubikey-touch-detector" /usr/local/bin/
  else
    log "Error: Binary not found after go install"
    return 1
  fi
  
  # Download and install systemd files
  local temp_dir=$(mktemp -d)
  cd "$temp_dir"
  
  git clone https://github.com/maximbaz/yubikey-touch-detector.git
  cd yubikey-touch-detector
  
  mkdir -p ~/.config/systemd/user
  cp yubikey-touch-detector.{service,socket} ~/.config/systemd/user/
  
  # Create config directory
  mkdir -p "${XDG_CONFIG_HOME:-${HOME}/.config}/yubikey-touch-detector"
  if [[ -f service.conf.example ]]; then
    cp service.conf.example "${XDG_CONFIG_HOME:-${HOME}/.config}/yubikey-touch-detector/service.conf"
  fi
  
  cd - >/dev/null
  rm -rf "$temp_dir"
  
  setup_linux_systemd
}

# Linux: Setup systemd service
setup_linux_systemd() {
  log ""
  log "Setting up systemd service..."
  
  systemctl --user daemon-reload
  
  log ""
  log "How would you like to run the service?"
  log "  1. Always running (recommended)"
  log "  2. Socket-activated (starts on demand)"
  log "  3. Manual start only"
  prompt "Select option [1-3]: "
  read -n 1 -r choice
  echo
  
  case "${choice:-}" in
    1)
      systemctl --user enable --now yubikey-touch-detector.service
      log "Service enabled and started"
      ;;
    2)
      systemctl --user enable --now yubikey-touch-detector.socket
      log "Socket activation enabled"
      ;;
    3)
      log "Service installed but not enabled. Start manually with:"
      log "  systemctl --user start yubikey-touch-detector.service"
      ;;
    *)
      log "Invalid choice. Service installed but not enabled."
      ;;
  esac
  
  log ""
  log "Installation complete! YubiKey touch detection is now available."
  log ""
  log "To check status: systemctl --user status yubikey-touch-detector"
}

# macOS: Install yknotify
install_macos_yknotify() {
  log "Installing yknotify..."
  
  # Check for Go
  if ! command -v go &>/dev/null; then
    log "Go is not installed. Checking for Homebrew..."
    if command -v brew &>/dev/null; then
      log "Installing Go via Homebrew..."
      brew install go
    else
      log "Error: Go is required. Please install Go or Homebrew first."
      return 1
    fi
  fi
  
  # Install terminal-notifier for better notifications
  if command -v brew &>/dev/null && ! command -v terminal-notifier &>/dev/null; then
    log "Installing terminal-notifier for better notifications..."
    brew install terminal-notifier
  fi
  
  log "Installing yknotify..."
  go install github.com/noperator/yknotify@latest
  
  # Set up LaunchAgent
  local yknotify_path=""
  if [[ -f "$HOME/go/bin/yknotify" ]]; then
    yknotify_path="$HOME/go/bin/yknotify"
  elif command -v yknotify &>/dev/null; then
    yknotify_path=$(command -v yknotify)
  else
    log "Error: yknotify not found after installation"
    return 1
  fi
  
  log "Setting up LaunchAgent..."
  
  # Create wrapper script
  cat > "$HOME/yknotify.sh" << 'EOF'
#!/bin/bash
# YubiKey touch detector wrapper script

# Find yknotify in common locations
YKNOTIFY=""
for path in "$HOME/go/bin/yknotify" "/usr/local/bin/yknotify" "$(command -v yknotify 2>/dev/null)"; do
  if [[ -x "$path" ]]; then
    YKNOTIFY="$path"
    break
  fi
done

if [[ -z "$YKNOTIFY" ]]; then
  echo "Error: yknotify not found" >&2
  exit 1
fi

# Run yknotify and process output
"$YKNOTIFY" | while read -r line; do
  # Parse JSON output
  if [[ "$line" =~ \"type\":\"([^\"]+)\" ]]; then
    type="${BASH_REMATCH[1]}"
    
    # Use terminal-notifier if available, otherwise osascript
    if command -v terminal-notifier &>/dev/null; then
      terminal-notifier -title "YubiKey" -message "Touch your YubiKey ($type)" -sound default
    else
      osascript -e "display notification \"Touch your YubiKey ($type)\" with title \"YubiKey\""
    fi
  fi
done
EOF
  
  chmod +x "$HOME/yknotify.sh"
  
  # Create LaunchAgent plist
  cat > "$HOME/Library/LaunchAgents/com.user.yknotify.plist" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.user.yknotify</string>
    <key>ProgramArguments</key>
    <array>
        <string>$HOME/yknotify.sh</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
    <key>KeepAlive</key>
    <true/>
    <key>StandardErrorPath</key>
    <string>/tmp/yknotify.err</string>
    <key>StandardOutPath</key>
    <string>/tmp/yknotify.out</string>
</dict>
</plist>
EOF
  
  # Load the agent
  launchctl unload "$HOME/Library/LaunchAgents/com.user.yknotify.plist" 2>/dev/null || true
  launchctl load "$HOME/Library/LaunchAgents/com.user.yknotify.plist"
  launchctl start com.user.yknotify
  
  log ""
  log "Installation complete! yknotify is now running."
  log ""
  log "To check status: launchctl list | grep yknotify"
  log "To view logs: tail -f /tmp/yknotify.{out,err}"
  log ""
  log "Note: You may need to grant notification permissions when prompted."
}

# macOS: Install gpg-tap-notifier
install_macos_gpg_tap_notifier() {
  log "Installing gpg-tap-notifier-macos..."
  log ""
  log "This tool requires manual installation from GitHub releases."
  log "Opening the releases page in your browser..."
  log ""
  
  open "https://github.com/palantir/gpg-tap-notifier-macos/releases"
  
  log "Please download and install the latest .dmg file."
  log ""
  log "After installation:"
  log "  1. Open the app from Applications"
  log "  2. Grant notification permissions when prompted"
  log "  3. Configure it to start at login if desired"
}

# Run main function
main "$@"