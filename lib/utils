# utils - Functions used by SSH Keycutter
#
# - append-line-if-missing(): Append line to file if it does not exist
# - prepend-line-if-missing(): Prepend line to file if it does not exist
# - add-line-if-missing(): Append or prepend line to file if it does not exist
# - dir-ensure(): Ensure directory exists with correct permissions
# - log(): Write colorized messages to stdout or stderr

append-line-if-missing() {
    add-line-if-missing append "$@"
}

# Display a consistent prompt for user confirmation
prompt() {
    local message="$1"
    local color="\033[1;35m"  # Magenta color
    local reset="\033[0m"
    local prefix="‚ùì "

    # Check for NO_COLOR or if output is not a terminal
    if [[ -n ${NO_COLOR:-} ]] || [[ ! -t 1 ]]; then
        printf "%s%s " "$prefix" "$message"
    else
        printf "%b%s%s %b" "$color" "$prefix" "$message" "$reset"
    fi
}

prepend-line-if-missing() {
    add-line-if-missing prepend "$@"
}

add-line-if-missing() {
    local mode="${1:-append}"
    local target_file="${2}"
    local line_to_add="${3}"
    local backup_extension="${4:-".backup.$(date +%s)"}"

    # Check if target file exists
    if [[ ! -f $target_file ]]; then
      log "File not found '$target_file'"
      prompt "Create empty file we can add to? [y/N]"
      read -n 1 -r
      echo  # Move to a new line after user input
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        file-ensure "$target_file"
      fi
    fi

    # Check if the line is already in the file to avoid duplicates
    if ! grep -qxF "$line_to_add" "$target_file"; then
        log "Proposed change to $target_file in $mode mode:"
        case "$mode" in
            append)
                command diff -u "$target_file" <(cat "$target_file"; echo "$line_to_add") || true
                ;;
            prepend)
                command diff -u "$target_file" <(echo "$line_to_add"; cat "$target_file") || true
                ;;
            *)
                echo "Error: Invalid mode specified. Use 'prepend' or 'append'."
                return 1
                ;;
        esac

        prompt "Apply this change? [y/N]"
        read -n 1 -r
        echo  # Move to a new line after user input
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            log "Applying change to $target_file"
            cp "$target_file" "$target_file$backup_extension"
            case "$mode" in
                append)
                    echo "$line_to_add" >> "$target_file"
                    ;;
                prepend)
                    if [[ ! -s "$target_file" ]]; then
                        echo "$line_to_add" > "$target_file"
                    else
                        tmpfile=$(mktemp)
                        sed -e "1i\\
$line_to_add
" "$target_file" > "$tmpfile" && mv "$tmpfile" "$target_file"
                    rm -f "$tmpfile"
                    fi
                    ;;
            esac
            log "Backup of original file created with extension: $backup_extension"
        else
            log "Change not applied."
        fi
    else
        log "Debug: Line already present in $target_file"
    fi
}

# Ensure directory exists with correct permissions
dir-ensure() {
    local dir_path="${1:?}"
    local permissions="${2:-}"

    if [[ $# == 0 ]]; then
        echo "Usage: dir-ensure <dir_path> [<permissions>]"
        return 1
    fi

    # Check if the dir_path exists in any form (file, directory, symlink, etc.)
    if [[ -e "$dir_path" || -L "$dir_path" ]]; then
        # If the path is not a directory, return an error.
        if [[ ! -d "$dir_path" ]]; then
            log "Error: The path '$dir_path' exists but is not a directory."
            return 1
        fi
    fi

    if [[ ! -d "$dir_path" ]]; then
        log "Create directory '$dir_path' ${permissions:+"with permissions '$permissions'"}."
        install -d ${permissions:+"-m$permissions"} "$dir_path"
    elif [[ -n "$permissions" ]]; then
        local current_permissions
        current_permissions=$(ls -ld "$dir_path" | awk '{print $1}')
        
        install -d -m "$permissions" "$dir_path"
        local new_permissions
        new_permissions=$(ls -ld "$dir_path" | awk '{print $1}')
        
        if [[ "$current_permissions" != "$new_permissions" ]]; then
            log "Modify Directory permissions: $dir_path"
        else
            log "DEBUG : No changes required to $dir_path"
        fi
    else
        log "DEBUG : No changes required to $dir_path"
    fi
}

file-ensure() {
    local file_path="${1:?}"
    local permissions="${2:-}"
    dir-ensure "$(dirname "${file_path}")" "$permissions"
    touch "${file_path}"
    if [[ -n "$permissions" ]]; then
        # XXX Check whether permissions actually need changing
        log "Ensure file permissions for '$file_path' are '$permissions'."
        chmod "$permissions" "${file_path}"
    fi
}

apply-template() {
    # Install file from template if it does not exist
    # if the file exists:
    # if it is identical, print a message to that effect
    # if it is different, show the diff and ask user if they want to overwrite
    local template_path="${1:-}"
    local target_path="${2:-}"
    if [[ -f $target_path ]]; then
        if diff -q "$target_path" "$template_path" >/dev/null; then
            log "Debug: File is identical: $target_path $template_path"
        else
            log "File is different: $target_path"
            command diff -u "$target_path" "$template_path" || true
            prompt "Overwrite? [y/N]"
            read -n 1 -r
            echo  # Move to a new line after user input
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                log "Overwriting $target_path"
                cp "$template_path" "$target_path"
            fi
        fi
    else
        log "Create: $target_path"
        cp "$template_path" "$target_path"
    fi
}

# Write colorized messages to stdout or stderr
log() {
    local no_newline=false
    if [[ "$1" == "-n" ]]; then
        no_newline=true
        shift
    fi

    local message="$*"
    local first_word_downcased=$(echo "$message" | awk '{print tolower($1)}')

    if [[ "$first_word_downcased" =~ "debug" && -z ${DEBUG:-} ]]; then
        return
    fi

    local destination='stdout'
    local prefix

    # Color code assignments by color names
    local blue="\033[0;34m"
    local yellow="\033[0;33m"
    local red="\033[0;31m"
    local cyan="\033[0;36m"
    local green="\033[0;32m"
    local magenta="\033[1;35m"
    local orange="\033[38;5;208m"
    local reset="\033[0m"

    # Default colour
    local color="$reset"
    case $first_word_downcased in
        info*|tip*)             color="$blue";    prefix="Ô∏èüõà " ; destination='stderr';;
        warn*|note*)            color="$yellow";  prefix="‚ö†Ô∏è "; destination='stderr';;
        error*)                color="$red";     prefix="üö´ " ;;
        debug*)                color="$cyan";    prefix="üîç " ;;
        success*)              color="$green";   prefix="‚úÖ " ;;
        prompt*|overwrite*)     color="$magenta"; prefix="‚ùì " ;;
        add*|creat*|generat*) color="$orange";  prefix="‚ûï " ;;
        append*|prepend*)       color="$orange";  prefix="‚ûï " ;;
        chang*|modif*|updat*) color="$orange";  prefix="üîÑ " ;;
        configur*)            color="$orange";  prefix="üîÑ " ;;
        delet*|remov*|rm)     color="$orange";  prefix="‚ûñ " ;;
        start*)               color="$orange";  prefix="‚ñ∂Ô∏è  " ;;
        stop*)                color="$orange";  prefix="‚èπÔ∏è " ;;
        restart*|reload*)     color="$orange";  prefix="üîÅ " ;;
        *)                    color="$reset";   prefix="" ;;
    esac

    # Check for NO_COLOR or if output is not a terminal
    if [[ -n ${NO_COLOR:-} ]] || [[ ! -t 1 ]]; then
        # Check if destination is STDERR
        if [[ $destination == 'stderr' ]]; then
            >&2 printf "%s%s\n" "$prefix" "$message"
        else
            printf "%s%s\n" "$prefix" "$message"
        fi
    else
        # Check if destination is STDERR
        local format="%b%s%s%b"
        if ! $no_newline; then
            format+="\n"
        fi

        if [[ $destination == 'stderr' ]]; then
            >&2 printf "$format" "$color" "$prefix" "$message" "$reset"
        else
            printf "$format" "$color" "$prefix" "$message" "$reset"
        fi
    fi
}

check_version() {
    local current_version="$1"
    local required_version="$2"

    # Compare versions
    if [[ $(printf '%s\n' "$required_version" "$current_version" | sort -V | head -n1) == "$required_version" ]]; then
        if [[ "$required_version" != "$current_version" ]]; then
            echo "true"
        else
            echo "true"
        fi
    else
        echo "false"
    fi
}

# Handy function to columnise output
#
# Formats tabular data with aligned columns when output is a terminal,
# but preserves TSV format when piping to another command
columnise() {
  # Check if no arguments are provided
  if [ $# -eq 0 ]; then
    if ! [[ -t 1 ]]; then
      # Pass through unchanged
      cat
    else
      # Columnize the output
      column -t -s $'\t'
    fi
  else
    # Loop through all arguments
    for file in "$@"; do
      if [ -e "$file" ]; then
        # Process the file if it exists
        column -t -s $'\t' < "$file"
      else
        # Print an error message if the file doesn't exist
        echo "Error: File '$file' does not exist" >&2
      fi
    done
  fi
}

# Alias for backward compatibility
columnize-output() {
  columnise
}

# Append first token from each line of STDIN to argument list
#
# Implementation of `pipe-skimming` pattern.
#
#     $ stacks | skim-stdin foo bar
#     foo bar huginn mastodon grafana
#
#     $ stacks
#     huginn    CREATE_COMPLETE  2020-01-11T06:18:46.905Z  NEVER_UPDATED  NOT_NESTED
#     mastodon  CREATE_COMPLETE  2020-01-11T06:19:31.958Z  NEVER_UPDATED  NOT_NESTED
#     grafana   CREATE_COMPLETE  2020-01-11T06:19:47.001Z  NEVER_UPDATED  NOT_NESTED
#
# Typical usage within Bash-my-AWS functions:
#
#     local asg_names=$(skim-stdin "$@") # Append to arg list
#     local asg_names=$(skim-stdin)      # Only draw from STDIN
skim-stdin() {
  # Skip lines that start with # (headers)
  local skimmed_stdin="$([[ -t 0 ]] || awk '!/^#/ {ORS=" "; print $1}')"

  printf -- '%s %s' "$*" "$skimmed_stdin" |
    awk '{$1=$1;print}'  # trim leading/trailing spaces
}

offer_install_dependencies() {
    local deps=("$@")
    local to_install=()
    local install_all=false
    
    echo "Would you like to install the missing dependencies?"
    echo
    echo "Options: [y]es, [n]o, [a]ll, [s]kip"
    echo
    
    for dep in "${deps[@]}"; do
        if [[ "$install_all" == "true" ]]; then
            to_install+=("$dep")
            continue
        fi
        
        local dep_name="$dep"
        case "$dep" in
            gh) dep_name="GitHub CLI" ;;
            ykman) dep_name="YubiKey Manager" ;;
            touch-detector) dep_name="YubiKey Touch Detector" ;;
            openssh) dep_name="OpenSSH (via Homebrew)" ;;
            netcat) dep_name="netcat" ;;
            git) dep_name="Git" ;;
            bash) dep_name="Bash (via Homebrew)" ;;
        esac
        
        read -r -p "Install ${dep_name}? [y/n/a/s] " response
        case "$response" in
            [Yy]*)
                to_install+=("$dep")
                ;;
            [Aa]*)
                install_all=true
                to_install+=("$dep")
                ;;
            [Ss]*)
                echo "Skipping remaining dependencies."
                break
                ;;
            *)
                echo "Skipping ${dep_name}."
                ;;
        esac
    done
    
    # Install selected dependencies
    for dep in "${to_install[@]}"; do
        install_dependency "$dep"
    done
}

install_dependency() {
    local dep="$1"
    
    case "$dep" in
        gh)
            if [[ "$OSTYPE" == "darwin"* ]] && command -v brew &> /dev/null; then
                echo "Installing GitHub CLI via Homebrew..."
                brew install gh
            elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
                if command -v apt-get &> /dev/null; then
                    echo "Installing GitHub CLI via apt..."
                    echo "Run: sudo apt-get update && sudo apt-get install gh"
                elif command -v dnf &> /dev/null; then
                    echo "Installing GitHub CLI via dnf..."
                    echo "Run: sudo dnf install gh"
                else
                    echo "Please visit https://cli.github.com/manual/installation for installation instructions."
                fi
            else
                echo "Please visit https://cli.github.com/ for installation instructions."
            fi
            ;;
        ykman)
            if [[ "$OSTYPE" == "darwin"* ]] && command -v brew &> /dev/null; then
                echo "Installing YubiKey Manager via Homebrew..."
                brew install ykman
            elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
                if command -v apt-get &> /dev/null; then
                    echo "Installing YubiKey Manager via apt..."
                    echo "Run: sudo apt-get update && sudo apt-get install yubikey-manager"
                elif command -v dnf &> /dev/null; then
                    echo "Installing YubiKey Manager via dnf..."
                    echo "Run: sudo dnf install yubikey-manager"
                else
                    echo "Please visit https://developers.yubico.com/yubikey-manager/ for installation instructions."
                fi
            else
                echo "Please visit https://developers.yubico.com/yubikey-manager/ for installation instructions."
            fi
            ;;
        touch-detector)
            echo "Installing YubiKey Touch Detector..."
            keycutter install-touch-detector
            ;;
        openssh)
            if [[ "$OSTYPE" == "darwin"* ]] && command -v brew &> /dev/null; then
                echo "Installing OpenSSH via Homebrew..."
                brew install openssh
                echo "Note: You may need to restart your terminal for the new OpenSSH to take effect."
            else
                echo "Please update OpenSSH to version 8.2p1 or higher."
            fi
            ;;
        netcat)
            if [[ "$OSTYPE" == "darwin"* ]] && command -v brew &> /dev/null; then
                echo "Installing netcat via Homebrew..."
                brew install netcat
            elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
                if command -v apt-get &> /dev/null; then
                    echo "Installing netcat via apt..."
                    echo "Run: sudo apt-get update && sudo apt-get install netcat"
                elif command -v dnf &> /dev/null; then
                    echo "Installing netcat via dnf..."
                    echo "Run: sudo dnf install nc"
                else
                    echo "Please install netcat using your package manager."
                fi
            else
                echo "Please install netcat using your package manager."
            fi
            ;;
        git)
            if [[ "$OSTYPE" == "darwin"* ]] && command -v brew &> /dev/null; then
                echo "Installing Git via Homebrew..."
                brew install git
            elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
                if command -v apt-get &> /dev/null; then
                    echo "Installing Git via apt..."
                    echo "Run: sudo apt-get update && sudo apt-get install git"
                elif command -v dnf &> /dev/null; then
                    echo "Installing Git via dnf..."
                    echo "Run: sudo dnf install git"
                else
                    echo "Please install Git using your package manager."
                fi
            else
                echo "Please install Git using your package manager."
            fi
            ;;
        bash)
            if [[ "$OSTYPE" == "darwin"* ]] && command -v brew &> /dev/null; then
                echo "Installing Bash via Homebrew..."
                brew install bash
                echo "Note: You may need to add /usr/local/bin/bash or /opt/homebrew/bin/bash to /etc/shells"
                echo "and change your default shell with: chsh -s /usr/local/bin/bash"
            elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
                echo "Bash should already be up-to-date on Linux. Please check your distribution."
            else
                echo "Please update Bash to version 4.0 or higher."
            fi
            ;;
        *)
            echo "Unknown dependency: $dep"
            ;;
    esac
}

check_requirements() {
    local errors=0
    local missing_deps=()
    
    # Color codes for terminal output
    local RED='\033[0;31m'
    local GREEN='\033[0;32m'
    local YELLOW='\033[0;33m'
    local NC='\033[0m' # No Color
    
    # Symbols for colorblind accessibility
    local CHECK="‚úì"  # Check mark for installed
    local CROSS="‚úó"  # Cross for missing
    local WARN="‚ö†"   # Warning for outdated
    
    echo
    echo "Checking Keycutter dependencies:"
    echo "================================="
    echo
    echo "Required:"
    echo "---------"
    
    # Check Bash version
    local bash_version=$(bash --version | head -n1 | awk '{print $4}')
    local bash_required="4.0"
    if [[ $(check_version "$bash_version" "$bash_required") == "false" ]]; then
        echo -e "${RED}${CROSS}${NC} Bash >= ${bash_required} (current: ${bash_version})"
        errors=$((errors + 1))
        missing_deps+=("bash")
    else
        echo -e "${GREEN}${CHECK}${NC} Bash >= ${bash_required} (current: ${bash_version})"
    fi
    
    # Check Git version
    if command -v git &> /dev/null; then
        local git_version=$(git --version | awk '{print $3}')
        local git_required="2.34.0"
        if [[ $(check_version "$git_version" "$git_required") == "false" ]]; then
            echo -e "${YELLOW}${WARN}${NC} Git >= ${git_required} (current: ${git_version})"
        else
            echo -e "${GREEN}${CHECK}${NC} Git >= ${git_required} (current: ${git_version})"
        fi
    else
        echo -e "${RED}${CROSS}${NC} Git >= 2.34.0 (not installed)"
        errors=$((errors + 1))
        missing_deps+=("git")
    fi
    
    # Check OpenSSH version
    local ssh_version=$(ssh -V 2>&1 | awk '{print $1}' | awk -F[_p] '{print $2}')
    local ssh_required="8.2"
    if [[ $(check_version "$ssh_version" "$ssh_required") == "false" ]]; then
        echo -e "${RED}${CROSS}${NC} OpenSSH >= ${ssh_required}p1 (current: ${ssh_version})"
        errors=$((errors + 1))
        if [[ "$OSTYPE" == "darwin"* ]]; then
            missing_deps+=("openssh")
        fi
    else
        echo -e "${GREEN}${CHECK}${NC} OpenSSH >= ${ssh_required}p1 (current: ${ssh_version})"
    fi
    
    # Check netcat
    if command -v nc &> /dev/null; then
        echo -e "${GREEN}${CHECK}${NC} netcat (nc)"
    else
        echo -e "${RED}${CROSS}${NC} netcat (nc) (not installed)"
        errors=$((errors + 1))
        missing_deps+=("netcat")
    fi
    
    ## If on an ORIGIN host
    if [[ -z $SSH_CONNECTION ]]; then
        echo
        echo "Recommended (for origin host):"
        echo "------------------------------"
        
        # Check GitHub CLI
        if command -v gh &> /dev/null; then
            local gh_version=$(gh --version 2>/dev/null | head -n1 | awk '{print $3}')
            local gh_required="2.0.0"
            if [[ $(check_version "$gh_version" "$gh_required") == "false" ]]; then
                echo -e "${YELLOW}${WARN}${NC} GitHub CLI >= ${gh_required} (current: ${gh_version})"
            else
                echo -e "${GREEN}${CHECK}${NC} GitHub CLI >= ${gh_required} (current: ${gh_version})"
            fi
        else
            echo -e "${YELLOW}${WARN}${NC} GitHub CLI >= 2.0.0 (not installed - recommended for GitHub key upload)"
            missing_deps+=("gh")
        fi
        
        # Check YubiKey Manager (ykman)
        if command -v ykman &> /dev/null; then
            local ykman_version=$(ykman --version 2>/dev/null | head -n1 | awk '{print $3}')
            echo -e "${GREEN}${CHECK}${NC} YubiKey Manager (ykman) ${ykman_version}"
        else
            echo -e "${YELLOW}${WARN}${NC} YubiKey Manager (ykman) (not installed - recommended for YubiKey setup)"
            missing_deps+=("ykman")
        fi
        
        # Check for YubiKey touch detector
        local touch_detector_status="not installed"
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            if command -v yubikey-touch-detector &>/dev/null; then
                touch_detector_status="installed"
                if systemctl --user is-active yubikey-touch-detector.service &>/dev/null 2>&1; then
                    touch_detector_status="installed and running"
                fi
            fi
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            if command -v yknotify &>/dev/null || launchctl list 2>/dev/null | grep -q com.user.yknotify; then
                touch_detector_status="installed and running"
            fi
        fi
        
        if [[ "$touch_detector_status" == "not installed" ]]; then
            echo -e "${YELLOW}${WARN}${NC} YubiKey touch detector (not installed - run 'keycutter install-touch-detector')"
            missing_deps+=("touch-detector")
        elif [[ "$touch_detector_status" == "installed" ]]; then
            echo -e "${YELLOW}${WARN}${NC} YubiKey touch detector (installed but not running)"
        else
            echo -e "${GREEN}${CHECK}${NC} YubiKey touch detector (${touch_detector_status})"
        fi
    fi
    
    echo
    
    # Offer to install missing dependencies
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo "Missing or outdated dependencies detected."
        echo
        offer_install_dependencies "${missing_deps[@]}"
    elif [[ $errors -gt 0 ]]; then
        echo "Some requirements are not met. Please install the required versions."
        return 1
    else
        echo "All requirements are met."
        return 0
    fi
}
