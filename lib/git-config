#!/usr/bin/env bash
# Git URL Rewriting Configuration Functions

KEYCUTTER_GIT_CONFIG="${KEYCUTTER_CONFIG_DIR}/gitconfig"
KEYCUTTER_GIT_MAPPINGS="${KEYCUTTER_CONFIG_DIR}/git-mappings.conf"

# Initialize git-config settings
git-config-init() {
    # Create mappings file if it doesn't exist
    if [[ ! -f "$KEYCUTTER_GIT_MAPPINGS" ]]; then
        cat > "$KEYCUTTER_GIT_MAPPINGS" <<EOF
# Keycutter Git URL Mappings
# Format: <pattern_type>|<pattern>|<keytag>
# Example: org|CompanyOrg|github.com_work
# Example: user|myusername|github.com_personal
EOF
    fi
}

# Generate Git config for URL rewriting
git-config-generate() {
    local config_file="${1:-$KEYCUTTER_GIT_CONFIG}"
    
    cat > "$config_file" <<EOF
# Generated by keycutter $(date +"%Y-%m-%d %H:%M:%S")
# DO NOT EDIT MANUALLY - Regenerate with: keycutter git-config setup
#
# This file provides automatic Git URL rewriting to use the correct SSH keys
# based on repository organization or username patterns.

EOF
    
    # Process mappings
    if [[ -f "$KEYCUTTER_GIT_MAPPINGS" ]]; then
        while IFS='|' read -r pattern_type pattern keytag; do
            # Skip comments and empty lines
            [[ "$pattern_type" =~ ^#.*$ || -z "$pattern_type" ]] && continue
            
            case "$pattern_type" in
                org)
                    # Organization mapping for GitHub
                    cat >> "$config_file" <<EOF
# Organization: $pattern
[url "git@${keytag}:${pattern}/"]
    insteadOf = https://github.com/${pattern}/
    insteadOf = git@github.com:${pattern}/
    insteadOf = ssh://git@github.com/${pattern}/

EOF
                    ;;
                user)
                    # User mapping for GitHub
                    cat >> "$config_file" <<EOF
# User: $pattern
[url "git@${keytag}:${pattern}/"]
    insteadOf = https://github.com/${pattern}/
    insteadOf = git@github.com:${pattern}/
    insteadOf = ssh://git@github.com/${pattern}/

EOF
                    ;;
                gitlab-org)
                    # GitLab organization
                    cat >> "$config_file" <<EOF
# GitLab Organization: $pattern
[url "git@${keytag}:${pattern}/"]
    insteadOf = https://gitlab.com/${pattern}/
    insteadOf = git@gitlab.com:${pattern}/
    insteadOf = ssh://git@gitlab.com/${pattern}/

EOF
                    ;;
                default)
                    # Default fallback for a service
                    cat >> "$config_file" <<EOF
# Default for ${pattern}
[url "git@${keytag}:"]
    insteadOf = https://${pattern}/
    insteadOf = git@${pattern}:
    insteadOf = ssh://git@${pattern}/

EOF
                    ;;
            esac
        done < "$KEYCUTTER_GIT_MAPPINGS"
    fi
    
    log "Generated Git config: $config_file"
}

# Check if Git config include is set up
git-config-check-include() {
    local gitconfig="${HOME}/.gitconfig"
    local include_path="~/.ssh/keycutter/gitconfig"
    
    # Check if include exists in gitconfig
    if git config --global --get-all include.path | grep -q "${include_path}\|${KEYCUTTER_GIT_CONFIG}"; then
        return 0
    else
        return 1
    fi
}

# Add include to Git config
git-config-add-include() {
    local include_path="~/.ssh/keycutter/gitconfig"
    
    if git-config-check-include; then
        log "Git config include already set up"
        return 0
    fi
    
    log "Adding keycutter git config to ~/.gitconfig"
    git config --global --add include.path "$include_path"
    log "Added include directive to ~/.gitconfig"
}

# Interactive setup wizard
git-config-setup() {
    log "=== Keycutter Git URL Rewriting Setup ==="
    log
    log "This will configure automatic URL rewriting so you can use standard"
    log "GitHub/GitLab URLs and have them automatically use the correct SSH key."
    log
    
    # Initialize if needed
    git-config-init
    
    # Find existing keytags
    local keytags=()
    for key in "$KEYCUTTER_SSH_KEY_DIR"/*.pub; do
        [[ -f "$key" ]] || continue
        local keytag=$(basename "$key" .pub)
        keytags+=("$keytag")
    done
    
    if [[ ${#keytags[@]} -eq 0 ]]; then
        log "No SSH keys found. Please create keys first with 'keycutter create'"
        return 1
    fi
    
    log "Found SSH keys:"
    for keytag in "${keytags[@]}"; do
        log "  - $keytag"
    done
    log
    
    # Check for GitHub keys
    local github_personal=""
    local github_work=""
    for keytag in "${keytags[@]}"; do
        if [[ "$keytag" =~ github\.com_.* ]]; then
            if [[ "$keytag" =~ personal|main ]]; then
                github_personal="$keytag"
            elif [[ "$keytag" =~ work|company ]]; then
                github_work="$keytag"
            fi
        fi
    done
    
    # Interactive configuration
    if [[ -n "$github_personal" || -n "$github_work" ]]; then
        log "=== GitHub Configuration ==="
        
        if [[ -n "$github_personal" ]]; then
            prompt "What is your personal GitHub username? "
            read -r personal_username
            if [[ -n "$personal_username" ]]; then
                echo "user|${personal_username}|${github_personal}" >> "$KEYCUTTER_GIT_MAPPINGS"
                log "Added mapping: ${personal_username} -> ${github_personal}"
            fi
        fi
        
        if [[ -n "$github_work" ]]; then
            prompt "Which GitHub organizations use your work key? (comma-separated) "
            read -r work_orgs
            if [[ -n "$work_orgs" ]]; then
                IFS=',' read -ra orgs <<< "$work_orgs"
                for org in "${orgs[@]}"; do
                    org=$(echo "$org" | xargs)  # Trim whitespace
                    echo "org|${org}|${github_work}" >> "$KEYCUTTER_GIT_MAPPINGS"
                    log "Added mapping: ${org} -> ${github_work}"
                done
            fi
        fi
        
        # Ask about default
        prompt "Set a default key for other GitHub repos? [${github_personal:-none}] "
        read -r default_key
        default_key="${default_key:-$github_personal}"
        if [[ -n "$default_key" && "$default_key" != "none" ]]; then
            echo "default|github.com|${default_key}" >> "$KEYCUTTER_GIT_MAPPINGS"
            log "Added default: github.com -> ${default_key}"
        fi
    fi
    
    # Generate config
    git-config-generate
    
    # Set up include
    if ! git-config-check-include; then
        log
        prompt "Add include directive to ~/.gitconfig? [Y/n] "
        read -r response
        if [[ "${response:-Y}" =~ ^[Yy]$ ]]; then
            git-config-add-include
        else
            log
            log "To enable URL rewriting, add this to ~/.gitconfig:"
            log "[include]"
            log "    path = ~/.ssh/keycutter/gitconfig"
        fi
    fi
    
    log
    log "Setup complete! You can now clone with standard URLs:"
    log "  git clone https://github.com/org/repo"
    log "Instead of:"
    log "  git clone git@github.com_work:org/repo"
}

# Show current mappings
git-config-show() {
    log "=== Current Git URL Mappings ==="
    
    if [[ ! -f "$KEYCUTTER_GIT_MAPPINGS" ]]; then
        log "No mappings configured. Run 'keycutter git-config setup'"
        return 1
    fi
    
    log
    log "Configured mappings:"
    while IFS='|' read -r pattern_type pattern keytag; do
        [[ "$pattern_type" =~ ^#.*$ || -z "$pattern_type" ]] && continue
        
        case "$pattern_type" in
            org)
                log "  GitHub Organization '$pattern' -> $keytag"
                ;;
            user)
                log "  GitHub User '$pattern' -> $keytag"
                ;;
            gitlab-org)
                log "  GitLab Organization '$pattern' -> $keytag"
                ;;
            default)
                log "  Default for $pattern -> $keytag"
                ;;
        esac
    done < "$KEYCUTTER_GIT_MAPPINGS"
    
    log
    if git-config-check-include; then
        log "✓ Git config include is set up"
    else
        log "✗ Git config include not set up - run 'keycutter git-config setup'"
    fi
}

# Add an organization mapping
git-config-add-org() {
    local org="$1"
    local keytag="$2"
    
    if [[ -z "$org" || -z "$keytag" ]]; then
        log "Usage: keycutter git-config add-org <organization> <keytag>"
        return 1
    fi
    
    # Check if keytag exists
    if [[ ! -f "$KEYCUTTER_SSH_KEY_DIR/${keytag}.pub" ]]; then
        log "Error: Key '$keytag' not found"
        return 1
    fi
    
    # Add mapping
    echo "org|${org}|${keytag}" >> "$KEYCUTTER_GIT_MAPPINGS"
    log "Added mapping: ${org} -> ${keytag}"
    
    # Regenerate config
    git-config-generate
}

# Add a user mapping
git-config-add-user() {
    local service="$1"
    local user="$2"
    local keytag="$3"
    
    if [[ -z "$service" || -z "$user" || -z "$keytag" ]]; then
        log "Usage: keycutter git-config add-user <service> <username> <keytag>"
        return 1
    fi
    
    # Check if keytag exists
    if [[ ! -f "$KEYCUTTER_SSH_KEY_DIR/${keytag}.pub" ]]; then
        log "Error: Key '$keytag' not found"
        return 1
    fi
    
    # Add mapping
    echo "user|${user}|${keytag}" >> "$KEYCUTTER_GIT_MAPPINGS"
    log "Added user mapping: ${service}/${user} -> ${keytag}"
    
    # Regenerate config
    git-config-generate
}

# Remove an organization mapping
git-config-remove-org() {
    local org="$1"
    
    if [[ -z "$org" ]]; then
        log "Usage: keycutter git-config remove-org <organization>"
        return 1
    fi
    
    # Remove mapping
    sed -i.bak "/^org|${org}|/d" "$KEYCUTTER_GIT_MAPPINGS"
    log "Removed mapping for: ${org}"
    
    # Regenerate config
    git-config-generate
}

# Test URL rewriting
git-config-test() {
    local url="$1"
    
    if [[ -z "$url" ]]; then
        log "Usage: keycutter git-config test <url>"
        log "Example: keycutter git-config test https://github.com/myorg/repo"
        return 1
    fi
    
    log "Testing URL: $url"
    log
    
    # Use git config to test the rewriting
    local rewritten=$(git config --get-urlmatch url "$url" 2>/dev/null | head -1)
    
    if [[ -n "$rewritten" ]]; then
        log "Would be rewritten to: $rewritten"
    else
        # Try to determine what would happen
        local result=$(git ls-remote --get-url "$url" 2>/dev/null)
        if [[ -n "$result" && "$result" != "$url" ]]; then
            log "Would be rewritten to: $result"
        else
            log "No rewriting configured for this URL"
        fi
    fi
}