#!/usr/bin/env bash
# Git URL Rewriting Configuration - Per-Key Approach

KEYCUTTER_GIT_CONFIG_DIR="${KEYCUTTER_CONFIG_DIR}/git-configs"

# Initialize git-config directory
git-config-init() {
    # Create git-configs directory if it doesn't exist
    if [[ ! -d "$KEYCUTTER_GIT_CONFIG_DIR" ]]; then
        mkdir -p "$KEYCUTTER_GIT_CONFIG_DIR"
        log "Created git-configs directory at $KEYCUTTER_GIT_CONFIG_DIR"
    fi
}

# Generate Git config for a specific key
git-config-generate-for-key() {
    local keytag="$1"
    local config_file="${KEYCUTTER_GIT_CONFIG_DIR}/${keytag}.gitconfig"
    
    # Extract service from keytag (e.g., github.com from github.com_mbailey)
    local service="${keytag%%_*}"
    
    # Start with header
    cat > "$config_file" <<EOF
# Git configuration for SSH key: $keytag
# Generated by keycutter $(date +"%Y-%m-%d %H:%M:%S")
#
# This file provides automatic Git URL rewriting to use the correct SSH key
# for repositories accessed with this keytag.
#
# To activate, ensure your ~/.gitconfig includes:
# [include]
#     path = ~/.ssh/keycutter/git-configs/${keytag}.gitconfig

EOF
    
    # If there's a mappings file for this key, use it
    local mappings_file="${KEYCUTTER_GIT_CONFIG_DIR}/${keytag}.mappings"
    if [[ -f "$mappings_file" ]]; then
        log "Processing mappings from $mappings_file"
        while IFS= read -r line; do
            # Skip comments and empty lines
            [[ "$line" =~ ^[[:space:]]*# ]] && continue
            [[ -z "${line// }" ]] && continue
            
            # Each line is an account/org that should use this key
            cat >> "$config_file" <<EOF
[url "git@${keytag}:${line}/"]
    insteadOf = https://${service}/${line}/
    insteadOf = git@${service}:${line}/

EOF
        done < "$mappings_file"
    fi
    
    log "Generated git config for $keytag at $config_file"
}

# Add account/org to a key's mappings
git-config-add-mapping() {
    local keytag="$1"
    local account="$2"
    local mappings_file="${KEYCUTTER_GIT_CONFIG_DIR}/${keytag}.mappings"
    
    # Create mappings file if it doesn't exist
    if [[ ! -f "$mappings_file" ]]; then
        cat > "$mappings_file" <<EOF
# Accounts/organizations that use the $keytag SSH key
# Add one account or organization per line
# Example: myusername
# Example: mycompany

EOF
    fi
    
    # Check if already exists
    if grep -qF "$account" "$mappings_file" 2>/dev/null; then
        log "Account '$account' already mapped to $keytag"
        return 0
    fi
    
    # Add the account
    echo "$account" >> "$mappings_file"
    log "Added '$account' to $keytag mappings"
    
    # Regenerate the git config
    git-config-generate-for-key "$keytag"
}

# Interactive setup for a key
git-config-setup-interactive() {
    local keytag="$1"
    
    # Extract service from keytag
    local service="${keytag%%_*}"
    
    echo "Setting up Git URL rewriting for: $keytag"
    echo "This will configure Git to automatically use this SSH key for specific accounts."
    echo
    
    local mappings_file="${KEYCUTTER_GIT_CONFIG_DIR}/${keytag}.mappings"
    local accounts=()
    
    # If mappings file exists, load existing accounts
    if [[ -f "$mappings_file" ]]; then
        while IFS= read -r line; do
            [[ "$line" =~ ^[[:space:]]*# ]] && continue
            [[ -z "${line// }" ]] && continue
            accounts+=("$line")
        done < "$mappings_file"
        
        if [[ ${#accounts[@]} -gt 0 ]]; then
            echo "Currently configured accounts:"
            printf '  - %s\n' "${accounts[@]}"
            echo
        fi
    fi
    
    echo "Enter the GitHub/GitLab usernames or organizations that should use this key."
    echo "Press Enter after each one. Type 'done' when finished."
    echo
    
    while true; do
        read -p "Account/org (or 'done'): " account
        
        if [[ "$account" == "done" ]] || [[ -z "$account" ]]; then
            break
        fi
        
        git-config-add-mapping "$keytag" "$account"
    done
    
    # Generate the final config
    git-config-generate-for-key "$keytag"
    
    # Show instructions for including in gitconfig
    echo
    echo "Git configuration generated!"
    echo
    echo "To activate, add this to your ~/.gitconfig:"
    echo
    echo "[include]"
    echo "    path = ~/.ssh/keycutter/git-configs/${keytag}.gitconfig"
    echo
    echo "Or to include ALL keycutter git configs automatically:"
    echo
    echo "[include]"
    echo "    path = ~/.ssh/keycutter/git-configs/*.gitconfig"
}

# Scan for existing keys and offer to set up git config
git-config-scan() {
    echo "Scanning for SSH keys that could use Git configuration..."
    echo
    
    local keys_found=0
    
    # Look for keys in ~/.ssh/keycutter/keys/
    for keyfile in ~/.ssh/keycutter/keys/*.pub; do
        [[ -f "$keyfile" ]] || continue
        
        local keyname=$(basename "$keyfile" .pub)
        
        # Check if it looks like a git service key
        if [[ "$keyname" =~ ^(github\.com|gitlab\.com|bitbucket\.org)_ ]]; then
            keys_found=$((keys_found + 1))
            
            local config_file="${KEYCUTTER_GIT_CONFIG_DIR}/${keyname}.gitconfig"
            
            if [[ -f "$config_file" ]]; then
                echo "✓ $keyname (configured)"
            else
                echo "○ $keyname (not configured)"
                read -p "  Would you like to set up Git config for this key? (y/n) " -n 1 -r
                echo
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    git-config-setup-interactive "$keyname"
                fi
            fi
        fi
    done
    
    if [[ $keys_found -eq 0 ]]; then
        echo "No Git service keys found."
        echo
        echo "Git service keys should be named like:"
        echo "  github.com_username"
        echo "  gitlab.com_work"
        echo "  bitbucket.org_personal"
    fi
}

# Show current git config status
git-config-status() {
    echo "Git Configuration Status"
    echo "========================"
    echo
    
    if [[ ! -d "$KEYCUTTER_GIT_CONFIG_DIR" ]] || [[ -z "$(ls -A "$KEYCUTTER_GIT_CONFIG_DIR" 2>/dev/null)" ]]; then
        echo "No Git configurations found."
        echo
        echo "Run 'keycutter git-config scan' to detect and configure existing keys."
        return 0
    fi
    
    echo "Configured keys:"
    for config in "$KEYCUTTER_GIT_CONFIG_DIR"/*.gitconfig; do
        [[ -f "$config" ]] || continue
        
        local keyname=$(basename "$config" .gitconfig)
        local mappings_file="${KEYCUTTER_GIT_CONFIG_DIR}/${keyname}.mappings"
        
        echo
        echo "  $keyname:"
        
        if [[ -f "$mappings_file" ]]; then
            echo "    Accounts:"
            while IFS= read -r line; do
                [[ "$line" =~ ^[[:space:]]*# ]] && continue
                [[ -z "${line// }" ]] && continue
                echo "      - $line"
            done < "$mappings_file"
        else
            echo "    No accounts configured"
        fi
    done
    
    echo
    echo "To add more accounts to a key:"
    echo "  keycutter git-config add <keytag> <account>"
}