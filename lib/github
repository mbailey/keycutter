#!/usr/bin/env bash
# GitHub Functions

github-ssh-key-add() {

    # XXX Replace if same SSH Keytag exists on GitHub

    local ssh_key_path="$1"
    local ssh_keytag="$2"

    if [[ -z "$ssh_keytag" || -z "$ssh_key_path" ]]; then
        log "Error: ssh_keytag and ssh_key_path are required."
        return 1
    fi

    prompt "Upload public key to GitHub for auth and commit signing using Github CLI? (Y/n) "
    read -r choice
    choice=${choice:-Y}
    [[ $choice =~ ^[Yy]*$ ]] || return 1

    log "Tip: You can authorise GitHub CLI from a trusted device by visiting https://github.com/login/device"

    if github-auth; then
        log "Add SSH authentication key (${ssh_key_path}.pub) to GitHub"
        gh ssh-key add --type authentication --title "${ssh_keytag}" "${ssh_key_path}.pub"
        log "Add SSH signing key (${ssh_key_path}.pub) to GitHub"
        gh ssh-key add --type signing --title "${ssh_keytag}" "${ssh_key_path}.pub"
        log
        # echo "Log out of GitHub"
        # gh auth logout # XXX Only if we logged in or requested additional scopes
        log "Note: You will need to authorise this key for any GitHub Orgs that enforce SAML SSO."
        log "      This requires visiting https://github.com/settings/keys"
    else
        log "Error: Not uploading to key to GitHub (not authenticated)"
        return 1
    fi
}

github-auth() {
  # Check if GitHub CLI is installed
  if ! command -v gh &> /dev/null; then
    log >&2 "Error: GitHub CLI (gh) is not installed or not in PATH."
    log >&2 "Please install it from: https://cli.github.com/"
    return 1
  fi

  # Check for problematic version on Ubuntu
  if [[ -f /etc/os-release ]] && grep -q "Ubuntu" /etc/os-release; then
    gh_version=$(gh --version | head -n1 | awk '{print $3}')
    if [[ "$gh_version" == "2.4.0+dfsg1-2" ]]; then
      log >&2 "Warning: You are using GitHub CLI version $gh_version on Ubuntu"
      log >&2 "This version has known issues. Please follow the official installation instructions to install a newer version:"
      log >&2 "https://github.com/cli/cli/blob/trunk/docs/install_linux.md#debian-ubuntu-linux-raspberry-pi-os-apt"
      return 1
    fi
  fi

  # Check if user is logged in to GitHub
  if gh auth status -h github.com &> /dev/null; then
    logged_in_user=$(gh auth status -h github.com | grep 'account ' | awk '{print $7}')
    log >&2 "GitHub CLI: Logged in as ${logged_in_user} on github.com."
    
    # Add the new confirmation prompt
    prompt "Continue with current GitHub account (${logged_in_user})? [Y/n] "
    read -r choice
    choice=${choice:-Y}
    if [[ ! $choice =~ ^[Yy]*$ ]]; then
      # Log out if user wants to switch accounts
      gh auth logout
      if ! github-auth-login; then
        log >&2 "Error: Failed to log in to GitHub account."
        return 1
      fi
    else
      if ! github-check-scopes; then
        log >&2 "Missing required scopes. Refreshing token..."
        if ! gh auth refresh -h github.com -s admin:public_key,admin:ssh_signing_key; then
          log >&2 "Error: Failed to refresh GitHub token with required scopes."
          return 1
        fi
      fi
    fi
  else
    log >&2 "GitHub CLI: User is not logged in to github.com."
    if ! github-auth-login; then
      log >&2 "Error: Failed to log in to GitHub account."
      return 1
    fi
  fi

  return 0
}

github-auth-login() {
  log >&2 "Logging in to GitHub..."
  if ! gh auth login \
    -h github.com \
    --web \
    --git-protocol https \
    --scopes admin:public_key,admin:ssh_signing_key; then
    log >&2 "Error: GitHub authentication failed."
    return 1
  fi
  log >&2 "Successfully logged in to GitHub."
  return 0
}


github-check-scopes() {
  local scopes
  scopes=$(gh auth status -h github.com | grep 'Token scopes:' | cut -d':' -f2-)
  if [[ $scopes == *"admin:public_key"* ]] && [[ $scopes == *"admin:ssh_signing_key"* ]]; then
    log >&2 "GitHub CLI: Token scopes:$scopes"
    return 0
  else
    log >&2 "GitHub CLI: Missing required scopes. Current scopes:$scopes"
    return 1
  fi
}

github-auth-required-scopes() {
  local github_auth_scopes
  github_auth_scopes=$(gh auth status | grep scopes)
  if [[ $github_auth_scopes =~ 'admin:public_key' ]] && [[ $github_auth_scopes =~ 'admin:ssh_signing_key' ]]; then
    return 0
  else
    return 1
  fi
}


github-ssh-keys() {
  github-auth
  gh ssh-key list
}

github-ssh-keys-authentication() {
  github-ssh-keys | grep authentication
}

github-ssh-keys-signing() {
  github-ssh-keys | grep signing
}
